from aiogram import Router, F, Bot
from aiogram.filters import Command 
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from datetime import datetime, time

from data import keyboards
from db_manager import Manager
from utils.is_number import isNumber
from data.phrases import phrases
from random import choice

router = Router()
manager = Manager()

class new_dtask(StatesGroup):
    name = State()
    about = State()
    time = State()

def get_daily_tasks_keyboard(tasks: list):
    inline_keyboard = []
    if len(tasks) > 0:
        for i in tasks:
            minutes = i[3].minute
            if len(str(minutes)) < 2:
                minutes = f"0{minutes}"
                
            inline_keyboard.append([InlineKeyboardButton(text=f"{i[2]} {i[3].hour}:{minutes}", callback_data=f"daily_task_{i[0]}")])
    inline_keyboard.append([InlineKeyboardButton(text="–ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ ‚úèÔ∏è", callback_data="new_daily_task")])

    return InlineKeyboardMarkup(
        inline_keyboard=inline_keyboard
    )

@router.message(F.text == "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è üìë")
async def daily_tasks_button(message: Message):
    await message.answer(choice(phrases["daily_tasks"]), parse_mode="html", reply_markup=keyboards.daily_tasks)

@router.message(F.text == "–ó–∞–¥–∞–Ω–∏—è üìã")
async def tasks(message: Message):
    tasks = manager.get_daily_tasks(message.from_user.id)
    if len(tasks) == 0:
        await message.answer("üòû <b>–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π</b>. –ù–∞–º —Å–ª–µ–¥—É–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∏—Ö —Å–¥–µ–ª–∞—Ç—å!", parse_mode="html", reply_markup=get_daily_tasks_keyboard(tasks))
    else:
        await message.answer("üìë –°–µ–≥–æ–¥–Ω—è —É –≤–∞—Å:", parse_mode="html", reply_markup=get_daily_tasks_keyboard(tasks))


@router.callback_query(F.data == "new_daily_task")
async def new_daily_task1(callback_query: CallbackQuery, state: FSMContext, bot: Bot):
    await state.set_state(new_dtask.name)
    await bot.send_message(callback_query.from_user.id, "üòâ –û–∫–µ–π, –¥–∞–≤–∞–π—Ç–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–¥–∏–º –µ–π –∏–º—è:")

@router.message(new_dtask.name)
async def new_daily_task2(message: Message, state: FSMContext, bot: Bot):
    try:
        await state.update_data(name = message.text)
        await bot.send_message(message.from_user.id, "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–µ–º –Ω–µ–±–æ–ª—å—à–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è:")
        await state.set_state(new_dtask.about)

    except Exception as _ex:
        print("[ERROR]:", _ex)
        await message.answer("üò£ –£–ø—Å... –ö–∞–∂–µ—Ç—Å—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–¥–∞–ª–∏ –∏–º—è.")
        await state.clear()

@router.message(new_dtask.about)
async def new_daily_task3(message: Message, state: FSMContext, bot: Bot):
    try:
        await state.update_data(about = message.text)
        await bot.send_message(message.from_user.id, "–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ, –æ—Å—Ç–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è –¥–ª—è –Ω–∞—à–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è! –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>—á–∞—Å—ã:–º–∏–Ω—É—Ç—ã</b>, –Ω–∞–ø—Ä–∏–º–µ—Ä: 13:50 –∏–ª–∏ 17:00.", parse_mode="html")
        await state.set_state(new_dtask.time)

    except Exception as _ex:
        print("[ERROR]:", _ex)
        await message.answer("üò£ –£–ø—Å... –ö–∞–∂–µ—Ç—Å—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ.")
        await state.clear()

@router.message(new_dtask.time)
async def new_daily_task4(message: Message, state: FSMContext, bot: Bot):
    try:
        splitted = message.text.split(":")
        if len(splitted) == 2:
            hours = isNumber(splitted[0])
            minutes = isNumber(splitted[1])
            if hours != -1 and minutes != -1:
                await state.update_data(time = time(hours, minutes))
                data = await state.get_data()
                manager.upload_new_daily_task(message.from_user.id, data["name"], data["about"], data["time"])

                await bot.send_message(message.from_user.id, "‚úÖ <b>|</b> –ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –µ–≥–æ –≤ —Å–≤–æ—ë–º —Å–ø–∏—Å–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á.\n\nüòò –Ø –±—É–¥—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–º –æ –Ω—ë–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!", parse_mode="html")
                await state.clear()
            else:
                await message.answer("üò£ –£–ø—Å... –ö–∞–∂–µ—Ç—Å—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –≤–≤–µ–ª–∏ –≤—Ä–µ–º—è –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!")
        else:
            await message.answer("üò£ –£–ø—Å... –ö–∞–∂–µ—Ç—Å—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –≤–≤–µ–ª–∏ –≤—Ä–µ–º—è –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!")

    except Exception as _ex:
        print("[ERROR]:", _ex)
        await message.answer("üò£ –£–ø—Å... –ö–∞–∂–µ—Ç—Å—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ.")
        await state.clear()

